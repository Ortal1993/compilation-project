.decl edge(srcId:number, dstId:number, kind:symbol, label:symbol, type:symbol)
.input edge(filename="edges.facts", delimiter=",")

.decl vertex(nodeId:number, type:symbol, label:symbol)
.input vertex(filename="vertices.facts", delimiter=",")

.decl controlVertex(nodeId:number, label:symbol)
controlVertex(nodeId, label) :- vertex(nodeId, "control", label).

.decl dataVertex(nodeId:number, label:symbol)
dataVertex(nodeId, label) :- vertex(nodeId, "data", label).

//functions start vertices
.decl startVertex(nodeId:number)
startVertex(nodeId) :- controlVertex(nodeId, label), contains("start", label).

.decl paramVertex(nodeId:number)
paramVertex(nodeId) :- dataVertex(nodeId, label), contains("param", label).

.decl loadVertex(nodeId:number)
loadVertex(nodeId) :- controlVertex(nodeId, label), contains("load", label).

.decl callVertex(nodeId:number)
callVertex(nodeId) :- controlVertex(nodeId, label), contains("call", label).

.decl mergeVertex(nodeId:number)
mergeVertex(nodeId) :- controlVertex(nodeId, label), contains("merge", label).

// this relation contains function and array parameter pairs
// TODO: need to add type checking for parameters
.decl functionParameter(functionNodeId:number, arrayParameterNodeId:number)
functionParameter(functionNodeId, arrayParameterNodeId) :- startVertex(functionNodeId), paramVertex(arrayParameterNodeId), edge(arrayParameterNodeId, functionNodeId, "association", _, _).

.decl controlNeighbors(srcNodeId:number, dstNodeId:number)
controlNeighbors(srcNodeId, dstNodeId) :- edge(srcNodeId, dstNodeId, "control", _, _).

.decl changingMethods(name:symbol, delta:number)
changingMethods("push", 1).
changingMethods("pop", -1).
changingMethods("unshift", 1).
changingMethods("shift", -1).

.decl changingMethodCalling(arrayParameterNodeId:number,
                            callControl:number, 
                            delta:number)
changingMethodCalling(arrayParameterNodeId, callControl, delta) :-
paramVertex(arrayParameterNodeId),
loadVertex(loadControl),
callVertex(callControl),
vertex(propertyNodeId, "data", propertyLable),
edge(arrayParameterNodeId, loadControl, "data", "object", _),
edge(propertyNodeId, loadControl, "data", "property", _),
edge(loadControl, callControl, "data", "callable", _),
changingMethods(methodName, delta),
contains(methodName, propertyLable).

.decl mergeDelta(controlNodeId:number, arrayParameterNodeId:number, trueDelta:number, falseDelta:number)
mergeDelta(controlNodeId, arrayParameterNodeId, trueDelta, falseDelta) :-
mergeVertex(controlNodeId),
controlNeighbors(trueNodeId, controlNodeId),
controlNeighbors(falseNodeId, controlNodeId),
trueNodeId != falseNodeId,
arrayParameterDelta(trueNodeId, arrayParameterNodeId, trueDelta),
arrayParameterDelta(falseNodeId, arrayParameterNodeId, falseDelta).

.decl arrayParameterDelta(controlNodeId:number, 
                          arrayParameterNodeId:number, 
                          delta:number)
.output arrayParameterDelta(filename="output.csv", delimiter=",")

arrayParameterDelta(controlNodeId, arrayParameterNodeId, 0) :- 
functionParameter(controlNodeId, arrayParameterNodeId).

//if controlNodeId is call of changing methods
arrayParameterDelta(controlNodeId, arrayParameterNodeId, delta) :-
controlNeighbors(previousControlNodeId, controlNodeId),
arrayParameterDelta(previousControlNodeId, arrayParameterNodeId, previousDelta),
previousDelta != 999,
changingMethodCalling(arrayParameterNodeId, controlNodeId, currDelta),
delta = previousDelta + currDelta.

arrayParameterDelta(controlNodeId, arrayParameterNodeId, 999) :-
controlNeighbors(previousControlNodeId, controlNodeId),
arrayParameterDelta(previousControlNodeId, arrayParameterNodeId, previousDelta),
previousDelta = 999,
changingMethodCalling(arrayParameterNodeId, controlNodeId, _).

//else
arrayParameterDelta(controlNodeId, arrayParameterNodeId, previousDelta) :-
!mergeVertex(controlNodeId),
controlNeighbors(previousControlNodeId, controlNodeId),
arrayParameterDelta(previousControlNodeId, arrayParameterNodeId, previousDelta),
!changingMethodCalling(arrayParameterNodeId, controlNodeId, _).

arrayParameterDelta(controlNodeId, arrayParameterNodeId, trueDelta) :-
mergeDelta(controlNodeId, arrayParameterNodeId, trueDelta, falseDelta),
trueDelta = falseDelta.

//merge that merges trueDelta and falseDelta which are different so we need to set delta to "Top"
//"Top" is 999
arrayParameterDelta(controlNodeId, arrayParameterNodeId, 999) :-
mergeDelta(controlNodeId, arrayParameterNodeId, trueDelta, falseDelta),
trueDelta != falseDelta.


